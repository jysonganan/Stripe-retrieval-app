"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMockContextProps = exports.defaultMockContextProps = void 0;
exports.defaultMockContextProps = {
    userContext: {
        id: 'usr_1234',
        name: 'Test User',
        account: {
            country: 'US',
            id: 'acct_1234',
            name: 'Test Business',
        },
        locale: 'en-US',
    },
    environment: {
        mode: 'test',
        viewportID: 'test.viewport',
        objectContext: {
            id: 'obj_1234',
            object: 'test_object',
        },
    },
};
const getMockContextProps = (partialMockContext) => {
    var _a, _b;
    return ({
        userContext: Object.assign(Object.assign(Object.assign({}, exports.defaultMockContextProps.userContext), partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext), { account: Object.assign(Object.assign({}, exports.defaultMockContextProps.userContext.account), (_a = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.userContext) === null || _a === void 0 ? void 0 : _a.account) }),
        environment: Object.assign(Object.assign(Object.assign({}, exports.defaultMockContextProps.environment), partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.environment), { objectContext: Object.assign(Object.assign({}, exports.defaultMockContextProps.environment.objectContext), (_b = partialMockContext === null || partialMockContext === void 0 ? void 0 : partialMockContext.environment) === null || _b === void 0 ? void 0 : _b.objectContext) }),
    });
};
exports.getMockContextProps = getMockContextProps;
//# sourceMappingURL=mockData.js.map