import { ButtonProps, CheckboxProps, IconProps as SailIconProps, LinkProps, Properties, RadioProps, SelectProps, StylableProps, SwitchProps, TailorDateFieldProps, TextAreaProps, TextFieldProps, TokenizedCSSProperties } from './@sail/ui/internal/interface';
declare type PropertiesSubset<T> = keyof T extends keyof Properties ? T : never;
declare type ExposeCSS<P, T extends keyof TokenizedCSSProperties> = P & {
    css?: Pick<TokenizedCSSProperties, T>;
};
declare type DeprecateValue<T> = T & {
    /**
     * @deprecated Controlled inputs are not recommended. See: https://stripe.com/docs/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions
     */
    value?: string | number;
};
declare type DeprecateChecked<T> = T & {
    /**
     * @deprecated Controlled inputs are not recommended. See: https://stripe.com/docs/stripe-apps/how-ui-extensions-work#use-uncontrolled-components-for-interactions
     */
    checked?: boolean;
};
export declare const Box: "Box" & {
    readonly type?: "Box";
    readonly props?: StylableProps & {
        css?: PropertiesSubset<{
            textOverflow?: 'ellipsis';
            wordWrap?: 'break-word' | 'normal';
            overflowWrap?: 'break-word' | 'normal';
            wordBreak?: 'normal' | 'break-all' | 'keep-all' | 'break-word';
            textTransform?: 'capitalize' | 'uppercase' | 'lowercase' | 'none' | 'full-width' | 'full-size-kana';
            whiteSpace?: 'normal' | 'nowrap' | 'pre' | 'pre-wrap' | 'pre-line' | 'break-spaces';
            overflowX?: 'visible' | 'hidden' | 'scroll' | 'auto';
            overflowY?: 'visible' | 'hidden' | 'scroll' | 'auto';
        }>;
    };
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Box", StylableProps & {
    css?: PropertiesSubset<{
        textOverflow?: 'ellipsis';
        wordWrap?: 'break-word' | 'normal';
        overflowWrap?: 'break-word' | 'normal';
        wordBreak?: 'normal' | 'break-all' | 'keep-all' | 'break-word';
        textTransform?: 'capitalize' | 'uppercase' | 'lowercase' | 'none' | 'full-width' | 'full-size-kana';
        whiteSpace?: 'normal' | 'nowrap' | 'pre' | 'pre-wrap' | 'pre-line' | 'break-spaces';
        overflowX?: 'visible' | 'hidden' | 'scroll' | 'auto';
        overflowY?: 'visible' | 'hidden' | 'scroll' | 'auto';
    }>;
}, true>>;
export declare const Inline: "Inline" & {
    readonly type?: "Inline";
    readonly props?: StylableProps & {
        css?: PropertiesSubset<{
            textTransform?: 'capitalize' | 'uppercase' | 'lowercase' | 'none' | 'full-width' | 'full-size-kana';
        }>;
    };
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Inline", StylableProps & {
    css?: PropertiesSubset<{
        textTransform?: 'capitalize' | 'uppercase' | 'lowercase' | 'none' | 'full-width' | 'full-size-kana';
    }>;
}, true>>;
export declare const TextField: "TextField" & {
    readonly type?: "TextField";
    readonly props?: DeprecateValue<ExposeCSS<TextFieldProps, "width">>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TextField", DeprecateValue<ExposeCSS<TextFieldProps, "width">>, true>>;
export declare const TextArea: "TextArea" & {
    readonly type?: "TextArea";
    readonly props?: DeprecateValue<ExposeCSS<TextAreaProps, "width">>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"TextArea", DeprecateValue<ExposeCSS<TextAreaProps, "width">>, true>>;
export declare const Select: "Select" & {
    readonly type?: "Select";
    readonly props?: DeprecateValue<ExposeCSS<SelectProps, "width">>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Select", DeprecateValue<ExposeCSS<SelectProps, "width">>, true>>;
export declare const Radio: "Radio" & {
    readonly type?: "Radio";
    readonly props?: DeprecateChecked<RadioProps>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Radio", DeprecateChecked<RadioProps>, true>>;
export declare const Switch: "Switch" & {
    readonly type?: "Switch";
    readonly props?: DeprecateChecked<SwitchProps>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Switch", DeprecateChecked<SwitchProps>, true>>;
export declare const Checkbox: "Checkbox" & {
    readonly type?: "Checkbox";
    readonly props?: DeprecateChecked<CheckboxProps>;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Checkbox", DeprecateChecked<CheckboxProps>, true>>;
export declare const Link: "Link" & {
    readonly type?: "Link";
    readonly props?: ExposeCSS<LinkProps, "width" | "alignX">;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Link", ExposeCSS<LinkProps, "width" | "alignX">, true>>;
export declare const Button: "Button" & {
    readonly type?: "Button";
    readonly props?: ExposeCSS<ButtonProps, "width" | "alignX">;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Button", ExposeCSS<ButtonProps, "width" | "alignX">, true>>;
declare type IconProps = ExposeCSS<SailIconProps, 'fill'> & {
    name: string;
};
export declare const Icon: "Icon" & {
    readonly type?: "Icon";
    readonly props?: IconProps;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"Icon", IconProps, true>>;
export declare const DateField: "DateField" & {
    readonly type?: "DateField";
    readonly props?: TailorDateFieldProps;
    readonly children?: true;
} & import("@remote-ui/react").ReactComponentTypeFromRemoteComponentType<import("@remote-ui/types").RemoteComponentType<"DateField", TailorDateFieldProps, true>>;
export {};
